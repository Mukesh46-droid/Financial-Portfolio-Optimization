import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize

# Sample data: expected returns and covariance matrix of asset returns
returns = np.array([0.12, 0.18, 0.15])  # Expected returns for three assets
cov_matrix = np.array([[0.1, 0.02, 0.03],
                       [0.02, 0.08, 0.01],
                       [0.03, 0.01, 0.09]])  # Covariance matrix

# Function to calculate portfolio return
def portfolio_return(weights):
    return np.sum(weights * returns)

# Function to calculate portfolio risk (standard deviation)
def portfolio_risk(weights):
    return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))

# Objective function to minimize (negative Sharpe ratio)
def objective_function(weights):
    return -portfolio_return(weights) / portfolio_risk(weights)

# Constraints: weights must sum to 1 and be between 0 and 1
constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
bounds = tuple((0, 1) for asset in range(len(returns)))

# Initial guess (equal distribution)
initial_weights = [1./len(returns)] * len(returns)

# Optimization
optimal = minimize(objective_function, initial_weights, method='SLSQP', bounds=bounds, constraints=constraints)

# Results
optimal_weights = optimal.x
print("Optimal Weights:", optimal_weights)
print("Expected Portfolio Return:", portfolio_return(optimal_weights))
print("Portfolio Risk:", portfolio_risk(optimal_weights))

# Plotting the results (optional)
plt.bar(range(len(optimal_weights)), optimal_weights)
plt.xticks(range(len(optimal_weights)), ['Asset 1', 'Asset 2', 'Asset 3'])
plt.ylabel('Weight')
plt.title('Optimal Portfolio Weights')
plt.show()
